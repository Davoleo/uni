
----- Tipi, qualificatori, costanti letterali


----- I tipi fondamentali

** Tipi booleani:
  bool

** Tipi carattere:
  char, signed char, unsigned char   [narrow character type]
  wchar_t, char16_t, char32_t        [wide character type]

Tipi interi standard con segno:
  signed char, short, int, long, long long

Tipi interi standard senza segno:
  unsigned char, usigned short, unsigned int, ...

Tutti i tipi suddetti sono detti tipi integrali.
Booleani, caratteri narrow e short sono detti tipi integrali "piccoli",
in quanto *potrebbero* avere una dimensione (sizeof) inferiore a int
e pertanto sono soggetti a promozioni di tipo.

Tipi floating point:
  float, double, long double

Tipo void:
  ha un insieme vuoto di valori; serve per indicare che una
  funzione non ritorna alcun valore o, usando un cast esplicito,
  che il valore di una espressione deve essere scartato.
  [ (void) foo(3); // chiama foo(3) e scarta il risultato prodotto ]

Tipo std::nullptr_t
  è un tipo puntatore convertibile implicitamente in qualunque altro
  tipo puntatore; ha un solo valore possibile, la costante letterale
  nullptr, che indica il puntatore nullo (non dereferenziabile).

----- I tipi composti

riferimenti a lvalue --- T&
riferimenti a rvalue --- T&&
puntatori            --- T*
tipi array           --- T[n]
tipi funzione        --- T(T1, ..., Tn)
enumerazioni e classi/struct

-----------------------------------------------------------------------

----- Tipi qualificati: il qualificatore const

I tipi elencati sopra sono detti non qualificati.
Nel linguaggio C++ esistono i qualificatori "const" e "volatile".
Nel discorso che segue consideriamo solo il qualificatore const,
il cui uso è essenziale per una corretta progettazione e uso delle
interfacce software e come strumento di ausilio alla manutenzione
del software.

Dato un tipo T, è possibile fornirne la versione qualificata const T.
L'accesso ad un oggetto (o una parte di un oggetto) attraverso una
variabile il cui tipo è dotato del qualificatore const è consentito
in sola lettura (cioè, non sono consentite le modifiche).

Si noti che nel caso di tipi composti è necessario distinguere tra
la qualificazione del tipo composto rispetto alla qualificazione
delle sue componenti. Per esempio:
---------
struct S {
  int v;
  const int c;
  S(int cc) : c(cc) { v = 10; }
};

int main() {
  const S sc(5)
  sc.v = 20; // errore: sc è const e anche le sue componenti

  S s(5);
  s.v = 20; // legittimo: s non è const e S::v non è const
  s.c = 20; // errore: s non è const, ma S::c è const
}
---------

Si noti inoltre che lo stesso oggetto può essere modificabile o meno
a seconda del percorso usato per accedervi:
---------
struct S { int v; };
void foo() {
  S s;
  s.v = 10; // legittimo
  const S& sr = s; // riferimento a s, qualificato const
  sr.v = 10; // errore: non posso modificare s passando da sr.
}
---------


-----------------------------------------------------------------------

Costanti letterali:
il linguaggio mette a disposizione varie sintassi per definire valori
costanti; a seconda della sintassi usata, al valore viene associato
un tipo specifico, che in alcuni casi dipende dall'implementazione.

NOTA: l'elenco che segue NON è esaustivo; serve a dare un'idea delle
potenziali complicazioni; per esempio, nel caso degli interi consideriamo
solo la sintassi decimale, ma esistono anche
 - la sintassi binaria (0b1100, che rappresenta il numero decimale 12)
 - la sintassi ottale (014, che rappresenta il numero decimale 12)
 - la sintassi esadecimale (0xC, che rappresenta il numero decimale 12)

bool:
  false, true

char:
  'a', '3', 'Z', '\n'   (ordinary character literal)
  u8'a', u8'3'          (UTF-8 character literal)
signed char, unsigned char:
  <nessuna>
char16_t:
  u'a', u'3'   (prefisso case sensitive)
char32_t:
  U'a', U'3'   (prefisso case sensitive)
wchar_t:
  L'a', L'3'   (prefisso case sensitive)

short, unsigned short:
  <nessuna>

int:
  12345

Nota: in assenza di suffissi (U, L, LL) ad una costante *decimale* intera
viene attribuito il *primo* tipo tra int, long e long long
che sia in grado di rappresentarne il valore.
Il tipo dipende quindi dalla particolare implementazione utilizzata:
ad un valore molto grande può essere assegnato il tipo long o long long.

Nota: le regole per le altre sintassi (booleana, ottale, esadecimale)
prendono in considerazione anche i tipi unsigned.

Nota: i suffissi delle costanti intere e floating point sono case
insensitive; le convenzioni di solito privilegiano la versione
maiuscola (raramente la minuscola) per maggiore leggibilità.

In presenza del suffisso U, si sceglie la variante unsigned;
in presenza del suffisso L, l'ampiezza è scelta tra long e long long;
in presenza del suffisso LL, l'ampiezza è long long;
il suffisso U può comparire insieme a L o LL.

long:
  12345L
long long:
  12345LL
unsigned int:
  12345U
unsigned long:
  12345UL
unsigned long long:
  12345ULL

Per i floating point si può scegliere tra notazione decimale
e "scientifica" (nota: esiste anche una notazione esadecimale):
float:
  123.45F, 1.2345e2F
double:
  123.45, 1.2345e2
long double:
  123.45L, 1.2345e2L

void:
  <nessuna>
std::nullptr_t:
  nullptr

Letterali stringa:
  "Hello"
Il tipo associato al letterale è const char[6],
cioè un array di 6 caratteri costanti (5 + 1 per il terminatore 0).
E' possibile specificare un prefisso di encoding (u8, u, U, L)
come nel caso delle costanti carattere, che modifica in modo analogo
il tipo degli elementi dell'array.

Letterali stringa grezza (raw string literal):
  usano il prefisso R, un delimitatore a scelta e le parentesi tonde,
  in questo modo
    R"DELIMITATORE(stringa)DELIMITATORE"

Per esempio, scegliendo "STRING" come delimitatore,
si può scrivere il letterale

R"STRING(la mia stringa, lunga lunga, contiene anche
un carattere newline, senza doverlo codificare in modo strano
e può anche contenere " doppi apici, """"" anche ripetuti,
e altri caratteri strani, eccetera, eccetera)STRING"

---- User defined literal

Il C++ 2011 ha reso possibile anche la definizione dei cosiddetti
letterali definiti dall'utente. Si tratta di una notazione che
consente di aggiungere ad un letterale (intero, floating o stringa)
un suffisso definito dall'utente: il letterale verrà usato come
argomento per invocare una funzione di conversione implicita
definita anch'essa dall'utente.

Per esempio, a partire dal C++ 2014, il tipo di dato delle stringhe
stile C++ (std::string) fornisce la possibilità di usare il suffisso
's' per indicare che un letterale stringa deve essere convertito
in std::string. L'operatore di conversione è definito nel
namespace std::literals, per cui

#include <iostream>
#include <string>

int main() {
  using namespace std::literals;
  std::cout << "Hello";  // stampa la stringa C   (tipo const char[6])
  std::cout << "Hello"s; // stampa la stringa C++ (tipo std::string)
}

------------------------------------------------------------------------
