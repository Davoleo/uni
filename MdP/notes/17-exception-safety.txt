
-- Exception Safety

Una porzione di codice si dice `exception safe' quando si comporta
in maniera "adeguata" anche in presenza di comportamenti anomali
segnalati tramite il lancio di eccezioni.
In particolare, occorre valutare se la porzione di codice, in seguito
al comportamento eccezionale, non abbia compromesso lo stato del programma
in maniera irreparabile: esempi di compromissione sono il mancato rilascio
(cioè la **perdita**) di risorse oppure la corruzione dello stato interno
di una risorsa (ad esempio, l'invariante di classe non è più verificata),
con la conseguenza che qualunque ulteriore tentativo di interagire con
la risorsa si risolve in un comportamento non definito (undefined behavior).

Esistono tre diversi livelli di exception safety: base, forte e nothrow.

----------------------------

* Livello base

Una porzione di codice (una funzione o una classe) si dice exception
safe a livello base se, anche nel caso in cui si verifichino delle
eccezioni durante la sua esecuzione:

  (1) non si hanno perdite di risorse
  (2) si è neutrali rispetto alle eccezioni
  (3) anche in caso di uscita in modalità eccezionale, gli oggetti sui
      quali si stava lavorando sono distruggibili o riassegnabili senza causare
      comportamenti non definiti

Il punto 1 non necessita di spiegazioni.
Il punto 2 dice che una eventuale segnalazione di errore tramite
eccezione deve essere propagata al chiamante, che così potrà prenderne
atto ed eseguire a sua volta le eventuali azioni correttive che si
rendessero necessarie.
Il punto 3 afferma che lo stato interno di un oggetto, pur se parzialmente
inconsistente, deve comunque consentirne la corretta distruzione
(o il riassegnamento con un oggetto consistente).

Questo è il livello minimo che deve essere garantito per poter parlare
di exception safety. Gli altri livelli, che forniscono garanzie maggiori,
sono spesso considerati opzionali (perché più costosi da ottenere).

----------------------------

* Livello forte (strong)

Il livello forte di exception safety si ottiene quando, oltre a tutte
le garanzie fornite dal livello base, si aggiunge come ulteriore garanzia
una sorta di "atomicità" delle operazioni (tutto o niente).
Intuitivamente, l'invocazione di una funzione exception safe forte,
in caso di eccezione, garantisce che lo stato degli oggetti manipolati
è rimasto inalterato, identico allo stato precedente la chiamata.

Esempio:
supponiamo di avere una classe che implementa una collezione ordinata
di oggetti e di avere un metodo `insert' che inserisce un nuovo oggetto
nella collezione esistente. Se il metodo in questione garantisce
l'exception safety forte, allora in seguito ad una eccezione durante
una operazione di insert la collezione si troverà esattamente nello
stesso stato precedente all'operazione di insert (cioè, conterrà
esattamente gli stessi elementi che conteneva prima della chiamata
alla insert). Se invece fosse garantita solo l'exception safety a livello
base, non avendo la proprietà di atomicità, in caso di uscita con
eccezione la collezione si troverebbe in uno stato consistente,
ma potenzialmente in nessun rapporto con lo stato precedente alla chiamata
(per esempio, potrebbe essere vuota o contenere elementi diversi rispetto
a quelli contenuti precedentemente).

----------------------------

* Livello nothrow

E' il livello massimo: una funzione è nothrow se la sua esecuzione
è garantita non terminare in modalità eccezionale. In pratica,
questo livello lo si raggiunge in un numero limitato di casi:
 - quando l'operazione è così semplice che NON c'è alcuna possibilità
   di generare eccezioni (esempio, assegnamento di tipi built-in)
 - quando la funzione è in grado di gestire completamente al suo interno
   eventuali eccezioni, risolvendo eventuali problemi e portando comunque
   a termine con successo l'operazione richiesta;
 - quando la funzione, di fronte a eventuali eccezioni interne,
   nell'impossibilità di attuare azioni correttive, determina la
   terminazione di tutto il programma; questo è il caso delle funzioni
   che sono dichiarate (implicitamente o esplicitamente) `noexcept',
   come i *distruttori*: in caso di eccezione non catturata, viene
   automaticamente invocata la terminazione del programma.
   Intuitivamente, devono garantire il livello nothow i distruttori e
   le funzioni che implementano il rilascio delle risorse
   (non è ipotizzabile ottenere l'exception safety se l'operazione di
   rilascio delle risorse può non avere successo).

Si noti che il livello nothrow, per definizione, NON è neutrale
rispetto alle eccezioni.

----------------------------

-- Libreria standard e exception safety

I contenitori (vector, deque, list, set, map, ...) forniti
dalla libreria standard sono exception safe. Chiaramente,
una tale affermazione vale sotto determinate condizioni:
siccome si sta parlando di contenitori templatici, che possono essere
istanziati a partire da un qualunque tipo di dato T, le garanzie di
exception safety del contenitore sono valide a condizione che il
tipo di dato T degli elementi contenuti fornisca analoghe garanzie.

La cosa interessante da notare è che molte, ma non tutte, le operazioni
su questi contenitori forniscono la garanzia forte (strong exception safety).
Per esempio, se invochiamo il metodo
  void push_back(const T& t)
su di un oggetto di tipo std::vector<T> e il tentativo di copiare
l'oggetto t all'interno del vector dovesse fallire lanciando una eccezione
(per esempio, perché il costruttore di copia di T ha esaurito le risorse
a disposizione e non può effettuare la copia), possiamo essere sicuri che
il vector NON è stato modificato: se prima della chiamata conteneva gli
n elementi [t1, ..., tn], in uscita dalla chiamata contiene ancora
gli stessi elementi (nello stesso ordine).

Per alcune operazioni, però, fornire la garanzia strong è troppo costoso
e quindi viene fornita la garanzia base. Tipicamente questo succede
quando una operazione opera su molti elementi contemporaneamente.
Per esempio, il metodo
  void assign(size_type n, const T& val);
sostituisce il contenuto del vector con n copie del valore val;
siccome una eccezione può essere lanciata da una qualunque delle n
operazioni di costruzione, in caso di eccezione il vector rimane in
uno stato valido, ma il suo contenuto non è predicibile (in particolare,
molto probabilmente il contenuto precedente è irrecuperabile).

----------------------------

Per chi volesse approfondire (materiale in lingua inglese)

* Articolo di Stroustroup

  Exception Safety: Concepts and Techniques
  http://www.stroustrup.com/except.pdf

* Video e lucidi della presentazione di Jon Kalb al CppCon 2014
  (con bonus per i fan di Star Wars)

  Video parte 1: https://www.youtube.com/watch?v=W7fIy_54y-w
  Video parte 2: https://www.youtube.com/watch?v=b9xMIKb1jMk
  Video parte 3: https://www.youtube.com/watch?v=MiKxfdkMJW8
  Ludici: http://exceptionsafecode.com/slides/esc.pdf

----------------------------
